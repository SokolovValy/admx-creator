import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from pathlib import Path
import traceback
from .policy_editor import SimplePolicyEditor  # –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from .widgets import Tooltip
from core.policy_loader import load_policies, save_policies
from core.admx_generator import generate_admx
from core.adml_generator import generate_adml
from core.validator import validate_xml

class MainWindow:
    def __init__(self, root, config):
        self.root = root
        self.config = config
        self._setup_ui()
    
    def _setup_ui(self):
        self.root.title("ALT Linux Policy Editor")
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar = ttk.Frame(self.root)
        toolbar.pack(fill=tk.X, padx=5, pady=5)
        
        buttons = [
            ("+ –ù–æ–≤–∞—è", self._add_policy, "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É"),
            ("‚úèÔ∏è", self._edit_policy, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é"),
            ("üóëÔ∏è", self._delete_policy, "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é"),
            ("–≠–∫—Å–ø–æ—Ä—Ç", self._export, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ADMX/ADML")
        ]
        
        for text, cmd, tip in buttons:
            btn = ttk.Button(toolbar, text=text, command=cmd)
            btn.pack(side=tk.LEFT, padx=2)
            Tooltip(btn, tip)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª–∏—Ç–∏–∫
        self.policy_list = ttk.Treeview(self.root, 
                                      columns=("name", "type", "class"), 
                                      show="headings")
        self.policy_list.heading("name", text="–ò–º—è")
        self.policy_list.heading("type", text="–¢–∏–ø")
        self.policy_list.heading("class", text="–ö–ª–∞—Å—Å")
        self.policy_list.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        self._update_list()
    
    def _update_list(self):
        self.policy_list.delete(*self.policy_list.get_children())
        for policy in self.config["policies"]:
            self.policy_list.insert("", "end", 
                                 values=(policy["name"], 
                                        policy.get("type", "simple"),
                                        policy["class"]))
    
    def _add_policy(self):
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–æ–≤–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏"""
        choice = tk.Toplevel(self.root)
        choice.title("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª–∏—Ç–∏–∫–∏")
        
        ttk.Label(choice, text="–°–æ–∑–¥–∞—Ç—å:", padding=10).pack()
        
        ttk.Button(choice, text="–ü—Ä–æ—Å—Ç—É—é –ø–æ–ª–∏—Ç–∏–∫—É (On/Off)", 
                 command=lambda: self._create_simple_policy(choice)).pack(fill=tk.X, padx=20, pady=5)
        
        ttk.Button(choice, text="–°–ª–æ–∂–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)", 
                 command=lambda: self._show_complex_notice(choice)).pack(fill=tk.X, padx=20, pady=5)
        
        ttk.Button(choice, text="–û—Ç–º–µ–Ω–∞", command=choice.destroy).pack(fill=tk.X, padx=20, pady=10)

    def _create_simple_policy(self, choice_window):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏"""
        choice_window.destroy()
        editor = SimplePolicyEditor(self.root)
        self.root.wait_window(editor)
        
        if editor.result:
            self.config["policies"].append(editor.result)
            save_policies("config.yml", self.config)
            self._update_list()

    def _show_complex_notice(self, choice_window):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–ª–∏—Ç–∏–∫–∞—Ö"""
        choice_window.destroy()
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–†–µ–¥–∞–∫—Ç–æ—Ä —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–ª–∏—Ç–∏–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ")
    
    def _edit_policy(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–ª–∏—Ç–∏–∫–∏"""
        selection = self.policy_list.selection()
        if not selection:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É!")
            return
            
        selected_name = self.policy_list.item(selection[0])["values"][0]
        policy = next(p for p in self.config["policies"] if p["name"] == selected_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        if policy.get("type") == "simple":
            editor = SimplePolicyEditor(self.root)
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        else:
            self._show_complex_notice()
            return
            
        self.root.wait_window(editor)
        
        if editor.result:
            idx = self.config["policies"].index(policy)
            self.config["policies"][idx] = editor.result
            save_policies("config.yml", self.config)
            self._update_list()
    
    def _delete_policy(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏"""
        selection = self.policy_list.selection()
        if not selection:
            return
            
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É?"):
            selected_name = self.policy_list.item(selection[0])["values"][0]
            self.config["policies"] = [p for p in self.config["policies"] 
                                     if p["name"] != selected_name]
            save_policies("config.yml", self.config)
            self._update_list()
    
    def _export(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–∏—Ç–∏–∫ –≤ —Ñ–∞–π–ª—ã"""
        export_dir = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        if not export_dir:
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            Path(export_dir).mkdir(exist_ok=True)
            adml_dir = Path(export_dir) / "ru-RU"
            adml_dir.mkdir(exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
            generate_admx(self.config, Path(export_dir) / "policies.admx")
            generate_adml(self.config, "ru-RU", adml_dir / "policies.adml")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if validate_xml(Path(export_dir) / "policies.admx"):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{export_dir}")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                    "–§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π XML")
                    
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", 
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏:\n{str(e)}")
            print(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞: {traceback.format_exc()}")